"use client";

import { useState, useEffect } from "react";
import { cn } from "@/lib/utils";
import { fetchActiveRssFeeds } from "@/lib/api";

interface RssItem {
  title: string;
  link: string;
  pubDate?: string;
  source?: string;
}

interface RssTickerProps {
  className?: string;
}

export function RssTicker({ className }: RssTickerProps) {
  const [news, setNews] = useState<RssItem[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchRssNews = async () => {
      try {
        setLoading(true);

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ RSS –ª–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const activeFeeds = await fetchActiveRssFeeds();

        if (activeFeeds.length === 0) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
          const mockNews: RssItem[] = [
            {
              title:
                "–£—á–µ–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–∏–ø —á–µ—Ä–Ω—ã—Ö –¥—ã—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–∞–ª–∞–∫—Ç–∏–∫–∏",
              link: "#",
              pubDate: new Date().toISOString(),
              source: "Naked Science",
            },
            {
              title:
                "–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ñ–∏–∑–∏–∫–∏ —Å–æ–∑–¥–∞–ª–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è",
              link: "#",
              pubDate: new Date(Date.now() - 3600000).toISOString(),
              source: "Naked Science",
            },
            {
              title:
                "–ù–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–± —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ–π –Ω–∞ 40%",
              link: "#",
              pubDate: new Date(Date.now() - 7200000).toISOString(),
              source: "Naked Science",
            },
            {
              title:
                "–ú–∞—Ä—Å–æ—Ö–æ–¥ Perseverance –æ–±–Ω–∞—Ä—É–∂–∏–ª —Å–ª–µ–¥—ã –¥—Ä–µ–≤–Ω–µ–π –∂–∏–∑–Ω–∏ –Ω–∞ –ú–∞—Ä—Å–µ",
              link: "#",
              pubDate: new Date(Date.now() - 10800000).toISOString(),
              source: "Naked Science",
            },
            {
              title:
                "–ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –ª–µ—á–µ–Ω–∏—è —Ä–∞–∫–∞ –ø–æ–∫–∞–∑–∞–ª —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ 95% —Å–ª—É—á–∞–µ–≤",
              link: "#",
              pubDate: new Date(Date.now() - 14400000).toISOString(),
              source: "Naked Science",
            },
          ];
          setNews(mockNews);
          return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ RSS –¥–∞–Ω–Ω—ã–µ
        const allNewsItems: RssItem[] = [];

        for (const feed of activeFeeds) {
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ RSS
            const response = await fetch(
              `https://api.allorigins.win/get?url=${encodeURIComponent(feed.url)}`,
            );
            const data = await response.json();

            if (data.contents) {
              const parser = new DOMParser();
              const xmlDoc = parser.parseFromString(data.contents, "text/xml");

              // –ü–∞—Ä—Å–∏–º RSS —ç–ª–µ–º–µ–Ω—Ç—ã
              const items = xmlDoc.querySelectorAll("item");

              items.forEach((item, index) => {
                if (index < 5) {
                  // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–∞–∂–¥–æ–π –ª–µ–Ω—Ç—ã
                  const title = item.querySelector("title")?.textContent || "";
                  const link = item.querySelector("link")?.textContent || "#";
                  const pubDate =
                    item.querySelector("pubDate")?.textContent ||
                    new Date().toISOString();

                  if (title) {
                    allNewsItems.push({
                      title,
                      link,
                      pubDate,
                      source: feed.name,
                    });
                  }
                }
              });
            }
          } catch (feedError) {
            console.warn(`Error loading RSS feed ${feed.name}:`, feedError);
            continue;
          }
        }

        // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if (allNewsItems.length > 0) {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
          allNewsItems.sort(
            (a, b) =>
              new Date(b.pubDate || 0).getTime() -
              new Date(a.pubDate || 0).getTime(),
          );
          setNews(allNewsItems.slice(0, 10));
        } else {
          // Fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
          const mockNews: RssItem[] = [
            {
              title:
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ RSS –ª–µ–Ω—Ç—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
              link: "/admin",
              pubDate: new Date().toISOString(),
              source: "–°–∏—Å—Ç–µ–º–∞",
            },
          ];
          setNews(mockNews);
        }
      } catch (error) {
        console.error("Error fetching RSS feeds:", error);
        // Fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setNews([
          {
            title:
              "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS –ª–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            link: "/admin",
            pubDate: new Date().toISOString(),
            source: "–°–∏—Å—Ç–µ–º–∞",
          },
        ]);
      } finally {
        setLoading(false);
      }
    };

    fetchRssNews();

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    const interval = setInterval(fetchRssNews, 15 * 60 * 1000);

    return () => clearInterval(interval);
  }, []);

  if (loading || news.length === 0) {
    return null;
  }

  return (
    <div
      className={cn(
        "bg-gradient-to-r from-blue-600 to-blue-800 text-white py-3 overflow-hidden",
        className,
      )}
    >
      <div className="flex items-center h-8">
        <div className="font-bold mr-6 px-4 whitespace-nowrap bg-blue-900 rounded-r-full flex items-center">
          <span className="text-yellow-300 mr-2">üì°</span>
          –ù–û–í–û–°–¢–ò –ù–ê–£–ö–ò
        </div>
        <div className="ticker-container overflow-hidden relative w-full">
          <div className="ticker-content whitespace-nowrap animate-scroll">
            {news.concat(news).map((item, index) => (
              <span
                key={index}
                className="mx-8 font-medium hover:text-blue-200 cursor-pointer transition-colors"
              >
                <span className="text-yellow-300 mr-2">üî¨</span>
                <span className="font-semibold">{item.source}</span>:{" "}
                {item.title}
                <span className="mx-4 text-blue-300">‚Ä¢</span>
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –ø–æ–¥ —Å—Ç–∞—Ä—ã–º –∏–º–µ–Ω–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { RssTicker as RSSTicker };
