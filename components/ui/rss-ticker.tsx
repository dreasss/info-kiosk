"use client";

import { useState, useEffect } from "react";
import { cn } from "@/lib/utils";
import { fetchActiveRssFeeds, type RssFeed } from "@/lib/api";

interface RssItem {
  title: string;
  link: string;
  pubDate?: string;
  source?: string;
}

interface RssTickerProps {
  className?: string;
}

export function RssTicker({ className }: RssTickerProps) {
  const [news, setNews] = useState<RssItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [isClient, setIsClient] = useState(false);

  // Ensure we only render content after hydration
  useEffect(() => {
    setIsClient(true);
  }, []);

  // RSS –ª–µ–Ω—Ç–∞ —Å elementy.ru
  const elementyRssFeed: RssFeed = {
    id: "elementy-russia",
    name: "–≠–ª–µ–º–µ–Ω—Ç—ã.—Ä—É",
    url: "https://elementy.ru/rss/news/russia",
    active: true,
  };

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    if (!isClient) return;

    const fetchRssNews = async () => {
      try {
        setLoading(true);

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ RSS –ª–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º elementy.ru
        console.log("RSS Ticker: Fetching RSS feeds...");
        let activeFeeds = await fetchActiveRssFeeds();

        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º elementy.ru –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –ª–µ–Ω—Ç—É
        const feedsToLoad = [elementyRssFeed, ...activeFeeds];
        console.log(
          "RSS Ticker: Loading feeds:",
          feedsToLoad.map((f) => f.name),
        );

        // –ó–∞–≥—Ä—É–∂–∞–µ–º RSS –¥–∞–Ω–Ω—ã–µ
        const allNewsItems: RssItem[] = [];

        for (const feed of feedsToLoad) {
          try {
            console.log(
              `RSS Ticker: Attempting to load ${feed.name} from ${feed.url}`,
            );

            // –°–ø–∏—Å–æ–∫ CORS –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            const corsProxies = [
              `https://api.allorigins.win/get?url=${encodeURIComponent(feed.url)}`,
              `https://corsproxy.io/?${encodeURIComponent(feed.url)}`,
              `https://cors-anywhere.herokuapp.com/${feed.url}`,
              `https://thingproxy.freeboard.io/fetch/${feed.url}`,
            ];

            let response: Response | null = null;
            let data: any = null;

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            for (let i = 0; i < corsProxies.length; i++) {
              try {
                console.log(
                  `RSS Ticker: Trying proxy ${i + 1}/${corsProxies.length}`,
                );
                const proxyResponse = await fetch(corsProxies[i], {
                  method: "GET",
                  headers: {
                    Accept: "application/json, text/plain, */*",
                  },
                  // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
                  signal: AbortSignal.timeout(10000),
                });

                if (proxyResponse.ok) {
                  if (corsProxies[i].includes("allorigins.win")) {
                    data = await proxyResponse.json();
                    if (data.contents) {
                      response = proxyResponse;
                      break;
                    }
                  } else {
                    // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
                    const textData = await proxyResponse.text();
                    data = { contents: textData };
                    response = proxyResponse;
                    break;
                  }
                }
              } catch (proxyError) {
                console.warn(`RSS Ticker: Proxy ${i + 1} failed:`, proxyError);
                continue;
              }
            }

            if (!response || !data) {
              // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CORS)
              try {
                console.log(`RSS Ticker: Trying direct access to ${feed.url}`);
                const directResponse = await fetch(feed.url, {
                  method: "GET",
                  headers: {
                    Accept:
                      "application/rss+xml, application/xml, text/xml, */*",
                  },
                  signal: AbortSignal.timeout(10000),
                });

                if (directResponse.ok) {
                  const textData = await directResponse.text();
                  data = { contents: textData };
                  response = directResponse;
                  console.log(
                    `RSS Ticker: Direct access succeeded for ${feed.name}`,
                  );
                } else {
                  throw new Error(
                    `Direct access failed with status ${directResponse.status}`,
                  );
                }
              } catch (directError) {
                console.error(
                  `RSS Ticker: Direct access also failed:`,
                  directError,
                );
                throw new Error(`All access methods failed for ${feed.name}`);
              }
            }

            if (data.contents) {
              const parser = new DOMParser();
              const xmlDoc = parser.parseFromString(data.contents, "text/xml");

              // –ü–∞—Ä—Å–∏–º RSS —ç–ª–µ–º–µ–Ω—Ç—ã
              const items = xmlDoc.querySelectorAll("item");
              console.log(
                `RSS Ticker: Found ${items.length} items in ${feed.name}`,
              );

              items.forEach((item, index) => {
                if (index < 10) {
                  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–∞–∂–¥–æ–π –ª–µ–Ω—Ç—ã
                  const title =
                    item.querySelector("title")?.textContent?.trim() || "";
                  const link =
                    item.querySelector("link")?.textContent?.trim() || "#";
                  const pubDate =
                    item.querySelector("pubDate")?.textContent?.trim() ||
                    item.querySelector("dc\\:date")?.textContent?.trim() ||
                    new Date().toISOString();

                  if (title) {
                    allNewsItems.push({
                      title: title.replace(/\[.*?\]/g, "").trim(), // –£–±–∏—Ä–∞–µ–º [–∫–∞—Ç–µ–≥–æ—Ä–∏–∏] –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                      link,
                      pubDate,
                      source: feed.name,
                    });
                    console.log(
                      `RSS Ticker: Added item: ${title.substring(0, 50)}...`,
                    );
                  }
                }
              });
            }
          } catch (feedError) {
            console.error(
              `RSS Ticker: Error loading RSS feed ${feed.name}:`,
              feedError,
            );
            console.error(`RSS Ticker: Feed URL was: ${feed.url}`);
            continue;
          }
        }

        // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if (allNewsItems.length > 0) {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
          allNewsItems.sort(
            (a, b) =>
              new Date(b.pubDate || 0).getTime() -
              new Date(a.pubDate || 0).getTime(),
          );
          console.log(
            "RSS Ticker: Successfully loaded",
            allNewsItems.length,
            "news items",
          );
          setNews(allNewsItems.slice(0, 10));
        } else {
          // –ï—Å–ª–∏ RSS –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          console.log("RSS Ticker: No RSS items loaded");
          setNews([
            {
              title:
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
              link: "#",
              pubDate: new Date().toISOString(),
              source: "–°–∏—Å—Ç–µ–º–∞",
            },
          ]);
        }
      } catch (error) {
        console.error("RSS Ticker: Error fetching RSS feeds:", error);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        setNews([
          {
            title:
              "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS –ª–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
            link: "#",
            pubDate: new Date().toISOString(),
            source: "–°–∏—Å—Ç–µ–º–∞",
          },
        ]);
      } finally {
        setLoading(false);
      }
    };

    fetchRssNews();

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    const interval = setInterval(fetchRssNews, 15 * 60 * 1000);

    return () => clearInterval(interval);
  }, [isClient]);

  // Show nothing while not client-ready
  if (!isClient) {
    return null;
  }

  // Show loading or fallback
  if (loading) {
    return (
      <div className="bg-gradient-to-r from-blue-500/90 via-blue-600/95 to-sky-500/90 backdrop-blur-sm text-white py-4 overflow-hidden border-y border-white/10">
        <div className="flex items-center h-8">
          <div className="font-bold mr-8 px-6 py-2 whitespace-nowrap bg-white/15 backdrop-blur-md rounded-r-2xl flex items-center shadow-lg border border-white/20">
            <span className="text-yellow-300 mr-2 text-lg">üì°</span>
            <span className="font-semibold tracking-wide">
              –ó–ê–ì–†–£–ó–ö–ê –ù–û–í–û–°–¢–ï–ô...
            </span>
          </div>
        </div>
      </div>
    );
  }

  // If no news found, don't show anything
  if (news.length === 0) {
    return null;
  }

  return (
    <div
      className={cn(
        "bg-gradient-to-r from-blue-500/90 via-blue-600/95 to-sky-500/90 backdrop-blur-sm text-white py-4 overflow-hidden border-y border-white/10",
        className,
      )}
    >
      <div className="flex items-center h-8">
        <div
          className="font-bold mr-8 px-6 py-2 whitespace-nowrap bg-white/15 backdrop-blur-md rounded-r-2xl flex items-center shadow-lg border border-white/20"
          style={{
            boxShadow:
              "0 4px 20px rgba(0,0,0,0.1), inset 0 1px 0 rgba(255,255,255,0.2)",
          }}
        >
          <span className="text-yellow-300 mr-2 text-lg">üì°</span>
          <span className="font-semibold tracking-wide">–ù–û–í–û–°–¢–ò –ù–ê–£–ö–ò</span>
        </div>
        <div className="ticker-container overflow-hidden relative w-full">
          <div className="ticker-content whitespace-nowrap animate-scroll-slow">
            {news.concat(news).map((item, index) => (
              <span
                key={index}
                className="mx-12 font-medium hover:text-blue-200 cursor-pointer transition-all duration-300 hover:scale-105 inline-block"
              >
                <span className="text-yellow-300 mr-3 text-lg">üî¨</span>
                <span className="font-semibold text-blue-100">
                  {item.source}
                </span>
                <span className="mx-2 text-white/70">‚Ä¢</span>
                <span className="text-white">{item.title}</span>
                <span className="mx-8 text-blue-300/60">‚Ä¢</span>
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –ø–æ–¥ —Å—Ç–∞—Ä—ã–º –∏–º–µ–Ω–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { RssTicker as RSSTicker };
